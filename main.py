import traceback

import PySimpleGUI as sg
from VkUserBot import VkUserBot, read_token
from logger import Logger
"""
TODO:
-timer: make timer (request counter) in the main thread, and transfer API to sub-thread
"""
from vkbottle import VKAPIError


class GUIWindow:
    """Class that defines look and behavior of GUI"""

    def __init__(self):
        sg.theme("DarkAmber")
        self.logger = Logger()
        self.layout = self.layout_template()
        self.layout_name = 'main'
        self.window = sg.Window(title="VKGhostCleaner", layout=self.layout, scaling=1.5, margins=(50, 10))
        self.vk = VkUserBot(self.logger)  # bridge to vk API handler class
        self.logger.log("GUI controller initialized")

    def start_event_loop(self):
        """Start event loop for PySimpleGUI"""
        self.logger.log("Staring the event loop...")
        while True:
            try:
                event, values = self.window.read()
                if event == sg.WIN_CLOSED or event == '–í—ã—Ö–æ–¥':
                    break
                else:
                    self.event_handler(event, values)
            except VKAPIError as ex:
                tb = traceback.format_exc()
                sg.Print('–î–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å VK. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —Å–Ω–æ–≤–∞. '
                         '–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—á–∏–∫–æ–º, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–º—É —ç—Ç–æ—Ç '
                         f'—Ç–µ–∫—Å—Ç: \n{tb}', keep_on_top=True, wait=True)

                break
            except Exception as ex:
                tb = traceback.format_exc()
                sg.Print('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.'
                         ' –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–º—É —ç—Ç–æ—Ç '
                         f'—Ç–µ–∫—Å—Ç: \n{tb}', keep_on_top=True, wait=True)
                break
        self.logger.close()
        self.window.close()

    def event_handler(self, event, values):
        """
        :param event: event string provided by sg.window.read()
        :param values: values that can be extracted from input fields

        Handles GUI events from event loop
         """
        vk = self.vk
        window = self.window
        if event == "–ü–æ–∏—Å–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö":
            self.switch_layout('search')
        elif event == "üîç":
            self.logger.log(f"searching group {values.get('group input')}")
            group_name = vk.find_group_sync(values.get('group input'))
            group_name = f"–ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: {group_name}" if group_name else "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            window.find_element(key='group_name').update(group_name)
        elif event == 'back' or event == 'back1':
            self.switch_layout('main')
        elif event == '–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö':
            self.switch_layout('delete')
        elif event == 'find':
            self.event_find(values)
        elif event == '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é —É–¥–∞–ª–µ–Ω–∏–µ!':
            self.event_delete(values)
        else:
            self.logger.log("Unknown event: " + event)

    def event_find(self, values):
        """Handles 'find' event"""
        window = self.window
        vk = self.vk
        if vk.find_group_sync(values.get('group input')):
            try:
                posts_amount = int(values.get('post input'))
                if posts_amount > 0:
                    try:
                        rps = int(values.get('rps input'))
                        if rps in range(3, 101):
                            inactive = self.vk.find_inactive(posts_amount, window, rps)
                        else:
                            inactive = self.vk.find_inactive(posts_amount, window)
                        message = f"–í—ã—è–≤–ª–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(inactive)}"
                        window.find_element(key='group_name').update(message)
                    except ValueError:
                        inactive = self.vk.find_inactive(posts_amount, window)
                        message = f"–í—ã—è–≤–ª–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(inactive)}"
                        window.find_element(key='group_name').update(message)
                else:
                    warning = "‚ö† –í–æ –≤—Ç–æ—Ä–æ–º –æ–∫–Ω–µ –≤–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ—Å—Ç–æ–≤!"
                    window.find_element(key='group_name').update(warning)
            except ValueError:
                warning = "‚ö† –í–æ –≤—Ç–æ—Ä–æ–º –æ–∫–Ω–µ –≤–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ—Å—Ç–æ–≤!"
                window.find_element(key='group_name').update(warning)
            except VKAPIError[15]:
                warning = "‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–∫–µ–Ω–∞!"
                window.find_element(key='delete progress').update(warning)
            except VKAPIError[6]:
                warning = "‚ö† –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π RPS!"
                window.find_element(key='delete progress').update(warning)
        else:
            warning = "‚ö† –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
            window.find_element(key='group_name').update(warning)

    def event_delete(self, values):
        window = self.window
        vk = self.vk
        if vk.inactive:
            try:
                rps = int(values.get('rps input'))
                if rps in range(3, 101):
                    result = self.vk.delete(window, rps)
                else:
                    result = self.vk.delete(window)
                message = f"–£–¥–∞–ª–µ–Ω–æ: {result}"
                window.find_element(key='delete progress').update(message)
            except ValueError:
                result = self.vk.delete(window)
                message = f"–£–¥–∞–ª–µ–Ω–æ: {result}"
                window.find_element(key='delete progress').update(message)
            except VKAPIError[15]:
                warning = "‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–∫–µ–Ω–∞!"
                window.find_element(key='delete progress').update(warning)
            except VKAPIError[6]:
                warning = "‚ö† –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π RPS!"
                window.find_element(key='delete progress').update(warning)
        else:
            warning = "‚ö† –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ–∏—Å–∫!"
            window.find_element(key='delete progress').update(warning)

    def switch_layout(self, layout_name: str):
        """Show layout 'layout_name' (one of main, search, delete) and hide previous"""
        if layout_name == 'main':
            self.window['COL1'].update(visible=True)
            if self.layout_name == 'search':
                self.window['COL2'].update(visible=False)
            elif self.layout_name == 'delete':
                self.window['COL3'].update(visible=False)
            else:
                raise ValueError(f"switch_layout() exception: illegal Window.layout_name value '{self.layout_name}'")
            self.layout_name = 'main'
        elif layout_name == 'search':
            self.layout_name = 'search'
            self.window['COL2'].update(visible=True)
            self.window['COL1'].update(visible=False)
        elif layout_name == 'delete':
            self.layout_name = 'delete'
            self.window['COL3'].update(visible=True)
            self.window['COL1'].update(visible=False)
        elif layout_name == 'key':
            self.window['COL4'].update(visible=True)
            self.window['COL1'].update(visible=False)
        else:
            raise ValueError(f"switch_layout() exception: Illegal argument {layout_name}")

    @staticmethod
    def layout_template():
        """Return the layout template"""
        token = read_token()
        token_text = "" if token else "\n‚ö† —Ñ–∞–π–ª token.txt –ø—É—Å—Ç"
        header = [sg.Text(text=f'–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é{token_text}', justification='center', pad=(0, (5, 30)),
                          font=('Arial', 16))]
        column_main = [header,
                       [sg.Button('–ü–æ–∏—Å–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö', size=(25, 2), pad=(0, (10, 10)))],
                       [sg.Button('–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö', size=(25, 2), pad=(0, (10, 10)))],
                       [sg.Button('–í—ã—Ö–æ–¥', size=(25, 2), pad=(0, (10, 10)))]]
        column_search = [[sg.Text(text='–ü–æ–∏—Å–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö', justification='center', font=('Arial', 14))],
                         [sg.InputText(default_text="–í–≤–µ–¥–∏—Ç–µ ID –≥—É—Ä–ø–ø—ã", size=(40, 2), key='group input'),
                          sg.Button('üîç')],
                         [sg.Text(key='group_name', pad=(0, (10, 10)), size=(40, 1), justification='center')],
                         [sg.InputText(default_text="–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –ø–æ—Å—Ç–æ–≤", size=(40, 2), key='post input',
                                       pad=((0, 40), (10, 10)))],
                         [sg.Text('–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', pad=(0, (10, 10)))],
                         [sg.Text('RPS', tooltip='–°–º. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é. –ù–µ —Å—Ç–æ–∏—Ç –º–µ–Ω—è—Ç—å, –µ—Å–ª–∏ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ —ç—Ç–æ!'),
                          sg.InputText(default_text="3", size=(10, 2), key='rps input', pad=(0, (10, 10)))],
                         [sg.Button('–ü–æ–∏—Å–∫', key='find', size=(10, 1), pad=(0, (10, 10)))],
                         [sg.Button('–ù–∞–∑–∞–¥', key='back', size=(10, 1), pad=(0, (10, 10)))]]
        warning_text = '‚ö† –í–Ω–∏–º–∞–Ω–∏–µ! –î–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª inactive.xlsx, ' \
                       '—á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—Å—è, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ—Ä–Ω–æ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º –∏ –±—ã–ª —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –≤–µ—Ä–Ω–æ. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞' \
                       ' –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. –ü–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ–∏—Å–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö ' \
                       '–≤ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏ (–¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞)'
        column_delete = [[sg.Text(text='–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö', justification='center', font=('Arial', 14))],
                         [sg.Text(text=warning_text, font=('Arial', 10, 'normal'), size=(60, 6))],
                         [sg.Text('–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', pad=(0, (10, 10)))],
                         [sg.Text('RPS', tooltip='–°–º. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é. –ù–µ —Å—Ç–æ–∏—Ç –º–µ–Ω—è—Ç—å, –µ—Å–ª–∏ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ —ç—Ç–æ!'),
                          sg.InputText(default_text="3", size=(10, 2), key='rps delete', pad=(0, (10, 10)))],
                         [sg.Text('', pad=(0, (15, 10)), key='delete progress')],
                         [sg.Button('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é —É–¥–∞–ª–µ–Ω–∏–µ!', pad=(0, (10, 30)))],
                         [sg.Button('–ù–∞–∑–∞–¥', key='back1', size=(10, 1))]]
        column_key = [[sg.Text(text='–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏!', justification='center', font=('Arial', 14))],
                      [sg.Text(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ key.txt', justification='center', pad=(0, (10, 10)))]]
        layout = [[sg.Column(column_main, key='COL1', element_justification='center'),
                   sg.Column(column_search, key='COL2', visible=False, element_justification='center'),
                   sg.Column(column_key, key='COL4', visible=False, element_justification='center'),
                   sg.Column(column_delete, key='COL3', visible=False, element_justification='center')]]
        return layout


def gui_window():
    window = GUIWindow()
    window.start_event_loop()


if __name__ == '__main__':
    gui_window()
